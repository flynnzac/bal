\input texinfo
@settitle Leas manual
@copying
This is the manual for Leas, the Little Extensible Accounting System, a personal account manager.

Copying @copyright{} 2020 Zach Flynn.
@end copying

@titlepage
@title Leas manual
@author Zach Flynn

@page
@vskip 0pt plus 1fill
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Leas

This is the Leas reference manual.
@end ifnottex

@ifinfo
@menu
* Introduction:: introduction to Leas, what it is, and an outline of manual
* Tutorial:: tutorial explaining basic interactive usage of Leas
* Leas file format:: documentation of file format for Leas for other programs and scripts to modify them
* Programming Leas:: full documentation of the functions Leas exposes for use when writing custom Leas commands
@end menu
@end ifinfo

@node Introduction
@chapter Introduction

@b{Leas} is an interactive, command-line program for managing personal finances.  Its goal is to be an extensible tool for helping you keep track of your spending and to aid in making plans.  I started @b{Leas} to keep track of my finances leading up to my wedding. I found most free software personal finance packages were large GUI programs that had a long Time-to-Enter-Transaction: it took time to boot up an application that was not usually running and enter a transaction.  This small friction made it harder for me to build the habit of keeping track of things.  The programs were also difficult to change to make work the way I wanted them to. So I wrote @b{Leas} to solve this problem. I have been using it personally since October 2018 so it now works pretty much the way I want it to.  It has a low Time-to-Enter-Transaction because you can just enter the transaction interactively at a command prompt.  It is also easy to extend and script to automate different transactions or update the price of stocks, mutual funds, and ETF's. Hopefully, you will find it useful.

@b{Leas} is a command-line program, but it is possible to write a GUI on top of the program if you are looking for a project.  It is possible because @b{Leas} can be extended using the Guile Scheme programming language.  The program's prompt can execute arbitrary Scheme code. If you make a neat extension like this, let me know and I will reference it in this manual.

No knowledge of Scheme or programming in general is needed to use @b{Leas}.  I have included almost all the functions I use personally in the distribution itself. In other words, I use it without any programming in Scheme on a day-to-day basis.  The only commands I have written that are not included in the main @b{Leas} distribution are some commands to fetch the price of various stocks I own and update their value automatically, but I will show how to write such a command later in this document as an example.

When searching for existing Free Software solutions, I found at the other extreme programs that operated by users editing text files to add transactions (the best example being @b{ledger}).  I found this difficult to use and wanted something more interactive.  Of course, you may have your own preference.  Like @b{ledger}, @b{Leas} stores data in human-readable text files. @b{Leas}' save files are particularly easy to analyze with statistical or spreadsheet software.  The save file is simply a @b{tar} archive of comma-separated data files with data about your various transactions.  You can open these files in @b{R} or @b{Libreoffice} and analyze your past spending that way.

All standard @b{Leas} commands are small Scheme functions.  They use a built-in function @t{leas/call} which lets the user enter the function arguments interactively (it fills the role of @t{interactive} in Emacs, if you are familiar with it).  These functions are documented in the reference manual to help you construct your own commands.  The @b{Leas} prompt, in fact, is a Scheme interpreter.  Any Scheme expression can be written there.

This document has two main sections.  In the first, I describe the basic workflow for using @b{Leas}.  This section is more in-depth than the manpage and gives some examples of how to add accounts and make transactions.  It is a tutorial that will help get you up-and-running using @b{Leas}.  In the second section, I describe all the Scheme commands exported by @b{Leas} which is more useful if you are trying to write your own functions.

@node Tutorial
@chapter Tutorial

@node Adding a cash asset account
@section Adding a cash asset account

A file is made up of several "accounts".  To start, you will want to add some asset accounts.  Assets can be wherever you store your money or your property.  Asset accounts can be Checking accounts, Savings accounts, Stocks, Bonds, Cash, and anything else you own.  To see how this works in @b{Leas}, let's look at an example of adding a checking account to a fresh file.

@example
:> aa
Account: @i{Checking}
0: Expense
1: Income
2: Asset
3: Liability
Type: @i{2}
Opening Balance: @i{10000}
(Checking) :> 
@end example

This opens up an asset account called "Checking" with 10000 units of currency in it as an opening balance.  We can use asset accounts to pay for our expenses, to pay back our loans, and as a place to store the income we earn from working.  I discuss how to do each of those things in the following sections.

@node Paying for expenses
@section Paying for expenses

Now that we have an asset account, we can use it to pay for our expenses.

First, we add an expense account, say an account for our Rent.

@example
(Checking) :> aa
Account: @i{Rent}
0: Expense
1: Income
2: Asset
3: Liability
Type: @i{0}
Opening Balance: @i{0}
(Rent) :>
@end example

Now, to pay the Rent.  The general "payment" command in @b{Leas} is the "transfer" command, @t{t}.  @t{t} transfers money from one account to another account.  Making a payment is transferring money from your asset accounts to your expense accounts.

@example
(Rent) :> @i{t}
 0: Checking
 1: Rent
To Account: @i{1}
 0: Checking
 1: Rent
From Account: @i{0}
Amount: @i{2000}
Description: @i{The rent}
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Checking) :>
@end example

You can also use the @t{spend} command which is like the @t{t} command except that it only lists assets in the @i{from} account and expenses in the @i{to} account.  This is useful when you have lots of accounts.  We could have done the following with an equivalent result:
@example
(Rent) :> spend
 2: Rent
To Account: 2
 0: Cash
 1: Checking
From Account: 1
Amount: 2000
Description: The rent
Day:
Year [2020]:
Month [1]:
Day [22]:
(Checking) :>
@end example

By default, the prompt tells you what the @i{current account} is and, when you add an account, the current account is set to the account you just created.  Several commands act on the current account.  You can change the current account with the @t{sa} ("switch account") command,

@example
(Checking) :> sa
 0: Checking
 1: Rent
Account: 1
(Rent) :> 
@end example

The "list transactions" command is @t{lt}.  It lists the transactions in the current account,

@example
(Rent) :> lt
2019-04-30 The rent        2000.00
@end example

To see how much money is in your accounts, type @t{la} (for "list account") (@t{laa} lists only Asset accounts, @t{lal} lists only Liability accounts, and so on).

@example
(Rent) :> la
Checking         8000.00    8000.00
Rent             2000.00    2000.00
@end example

The output has two columns.  The first gives the balance in your account on the @i{current day}, and the second gives the balance in your account in the future.

To see the current day, use the command @t{cd}.  To set the current day, use @t{sd}.

@example
(Rent) :> sd
Current Day: 
Year [2019]: 2018
Month [4]: 12
Day [30]: 31
(Rent) :> cd
2018-12-31
@end example

Now, if we type @t{la}, we can see what the account balance would have looked like on 2018-12-31 and what it would be in the future.

@example
(Rent) :> la
Checking        10000.00    8000.00
Rent                0.00    2000.00
@end example

To change the day back to the current day, type @t{sd} and take all the default options,

@example
(Rent) :> sd
Current Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Rent) :>
@end example

To list only expense accounts (useful for getting an understanding of where you are spending your money),

@example
(Rent) :> lae
Rent         2000.00    2000.00
@end example

@node Earning income
@section Earning income

It is a good idea to earn income to pay for your expenses.  Highly recommended.  Like with paying expenses, to add income start by adding an income account. Let's start with adding a salary account,

@example
(Rent) :> aa
Account: Salary
0: Expense
1: Income
2: Asset
3: Liability
Type: 1
Opening Balance: 0
(Salary) :>
@end example

To receive a salary, do the opposite of paying for expenses: transfer money from the salary account to an asset account.
@example
(Salary) :> t
 0: Checking
 1: Rent
 2: Salary
To Account: 0
 0: Checking
 1: Rent
 2: Salary
From Account: 2
Amount: 6000
Description: Salary
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Salary) :> lt
2019-04-30 Salary        -6000.00
(Salary) :> la
Checking        14000.00   14000.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
@end example

@node Managing debt
@section Managing debt

Adding debt follows the same pattern as paying expenses and receiving income.
@example
(Salary) :> aa
Account: Loan
0: Expense
1: Income
2: Asset
3: Liability
Type: 3
Opening Balance: 0
(Loan) :> t
 0: Checking
 1: Rent
 2: Salary
 3: Loan
To Account: 0
 0: Checking
 1: Rent
 2: Salary
 3: Loan
From Account: 3
Amount: 10000
Description: Personal Loan
Day: 
Year [2019]: 
Month [4]: 
Day [30]: 
(Loan) :> la
Checking        24000.00   24000.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
Loan           -10000.00  -10000.00
(Loan) :> lt
2019-04-30 Personal Loan       -10000.00
@end example

Usually, people do not give you interest-free loans.  So you will also need an @i{expense} account for paying interest.
@example
(Loan) :> aa
Account: Interest
0: Expense
1: Income
2: Asset
3: Liability
Type: 0
Opening Balance: 0
(Interest) :>
@end example

To pay back loans, use the command @t{pl}.  This command allows you to split your payment on the loan between interest and principal.
@example
(Interest) :> pl
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Loan Account: 3
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Interest Account: 4
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Pay from Account: 0
Principal: 70
Interest: 30
Description: Loan Payment
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Checking) :> la
Checking        23900.00   23900.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
Loan            -9930.00   -9930.00
Interest           30.00      30.00
@end example

It is useful to see broadly how much we are spending, how much we are making, and how in debt we are.  To do so, we can use the command @t{bt}.
@example
(Checking) :> bt
Expense           2030.00    2030.00
Income           -6000.00   -6000.00
Asset            23900.00   23900.00
Liability        -9930.00   -9930.00
Worth            13970.00   13970.00
Balances         10000.00
@end example

Note that income is measured as a @i{negative} number as are @i{liabilities}.  @i{Worth} is @i{Assets} + @i{Liabilities} (because Liabilities are written as negative in @b{Leas}).  Balances gives the total of the opening balances.

@node Non-cash assets
@section Non-cash assets

You may own some non-cash assets, like stocks, mutual funds, or bonds.  The value of these assets in terms of currency changes over time.  @b{Leas} provides a command for updating the currency value of these assets.

First, let's add our mutual fund,
@example
(Checking) :> aa
Account: Mutual Fund
0: Expense
1: Income
2: Asset
3: Liability
Type: 2
Opening Balance: 10000
(Mutual Fund) :>
@end example

Then, let's add an income account for our fund.
@example
(Mutual Fund) :> aa
Account: Mutual Fund Income
0: Expense
1: Income
2: Asset
3: Liability
Type: 1
Opening Balance: 0
(Mutual Fund Income) :>
@end example

Now, say we own 500 shares of the mutual fund each worth 20 currency units. Say the value of a share in the mutual fund increased to 21 currency units. We can then use the @t{csp} ("change share price") command to change the value of the shares in our mutual fund,
@example
(Mutual Fund Income) :> sa
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
 5: Mutual Fund
 6: Mutual Fund Income
Account: 5
(Mutual Fund) :> csp
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
 5: Mutual Fund
 6: Mutual Fund Income
From Account: 6
Stock Price: 21
Number of Shares: 500
Day: 
Year [2019]: 
Month [4]: 
Day [30]: 
(Mutual Fund Income) :> lt
2019-04-30 Stock Price Change         -500.00
(Mutual Fund Income) :> la
Checking                  23900.00   23900.00
Rent                       2000.00    2000.00
Salary                    -6000.00   -6000.00
Loan                      -9930.00   -9930.00
Interest                     30.00      30.00
Mutual Fund               10500.00   10500.00
Mutual Fund Income         -500.00    -500.00
(Mutual Fund Income) :> 
@end example

You can automate this procedure by writing a script in Scheme to fetch the new price of the fund.

@node Saving loading and quitting
@section Saving, loading, and quitting

To save your accounts to disk, use the @t{w} command.

@example
(Mutual Fund Income) :> w
File: example.leas
(Mutual Fund Income) :> 
@end example

To do so non-interactively, type @t{leas/write "example.leas"}.

To quit, use the @t{q} command,

@example
(Mutual Fund Income) :> q
Save file? (yes/no) no
@end example

To load the file you just saved, you can use the interactive command @t{r},

@example
$ leas
:> r
File: example.leas
(Checking) :> la
Checking                  23900.00   23900.00
Rent                       2000.00    2000.00
Salary                    -6000.00   -6000.00
Loan                      -9930.00   -9930.00
Interest                     30.00      30.00
Mutual Fund               10500.00   10500.00
Mutual Fund Income         -500.00    -500.00
(Checking) :> 
@end example

To load the file non-interactively, you can use the command @t{leas/read "example.leas"}.  This command is particularly useful to include in @b{Leas}'s init file @t{~/.leasrc.scm}.  Usually, this file will include the line,

@example
(leas/read "/path/to/my-account.leas")
@end example

@node Scheme code
@section Scheme code

The prompt is a Scheme interpreter and can execute arbitrary code.  The only difference is that the outer expression should not be enclosed in parenthesis.  For example,
@example
(Checking) :> begin (display (+ 1 2)) (display "\n")
3
(Checking) :>
@end example

@b{Leas} provides a useful function @t{p} for displaying expressions and then adding a newline like the above,
@example
(Checking) :> p (+ 1 2)
3
(Checking) :>
@end example

In interactive functions, the prompt for the various arguments allows Scheme expressions as well.  For example, you can enter the value of a transaction as @t{(- 15.29 13.99)} or @t{(* 0.08 123)} (for calculating a tax, for example).

@node Common customizations
@section Common customizations

You can add customizations that are loaded automatically in @t{~/.leasrc.scm}.  This section gives examples for a few common customizations.

@node Set default file
@subsection Set default file

You will probably want to load the same file almost everytime you load @b{leas}.  To do so, add the following to @t{~/.leasrc.scm}:

@example
(leas/read "/path/to/file/my-account.leas")
@end example

@node Customize prompt
@subsection Customize prompt

The prompt is generated by calling the Scheme function @t{(leas/prompt)}.  If you change this function, you can customize the prompt.  For example, try adding the following to see the current date,

@example
(define leas/prompt
  (lambda ()
    (if (= (leas/get-number-of-accounts) 0)
        ":> "
        (let* ((day (leas/get-current-day))
               (mday (list-ref day 0))
               (month (list-ref day 1))
               (year (list-ref day 2)))
          (string-append
           "("
           (leas/get-current-account)
           " "
           (number->string year)
           "-"
           (number->string month)
           "-"
           (number->string mday)
           ") :> ")))))
@end example



@node Leas file format
@chapter Leas file format

The save file is a @b{tar} archive containing the following files in a directory named after the save file's filename (e.g. a save file named @i{book.leas} would, when un-tarred, be a directory called @i{book}):

@itemize @bullet
@item accounts - a CSV file containing the metadata for each account, one line for each account.  There is no header line giving column names. The fields are (in this order):
@itemize @bullet
@item Account Type - one of expense, income, asset, liability.
@item Account Name - the name of the account
@item Opening Balance - the opening balance of the account.
@end itemize
@item @i{account_name}.csv - for each account, there is a separate CSV file (the format of the filename for this CSV file implies that account names in leas need to be valid filenames). There is no header line giving column names.  Each row in the file is a transaction. The fields are (in this order):
@itemize @bullet
@item Account Name - will be the same for all transactions in the file, just the account name.
@item Amount - the amount of money added to or subtracted from the account.
@item Day - the day of the transaction (YYYY-MM-DD)
@item Description - a description of the transaction
@end itemize
@end itemize


@node Programming Leas
@chapter Programming Leas

This chapter will be more of a reference manual for the various Scheme functions available in @b{Leas}.

@bye


