bal
an extensible tool to keep personal accounts in order and to study past spending habits
----

Author: Zach Flynn <zlflynn@gmail.com>

---

bal is an interactive and scriptable command line personal accounting program to keep your books in order and to study past spending habits. It can be scripted and extended using Guile, a simple programming language (a Scheme dialect) from the GNU project (https://www.gnu.org/software/guile/).  Scripts can be written, for example, to automatically add transactions on the first of the month or even to update stock balances by fetching the latest stock price from the internet, or to produce custom reports on past spending habits (for example, a report of monthly spending on transactions with "coffee" in their description output to some CSV to be plotted in R).

---

When the command "bal" is entered at the command prompt, you are greated by bal's prompt.  

The main commands to add/edit/delete/list transactions and accounts are:

aa := add account
at := add transaction to current account

ea := rename account
et := edit transaction

da := delete account
dt := delete transaction

t := transfer between accounts, the most used command, a convenience function which adds transactions to two accounts, one in a positive amount (the "to" account) and the other in a negative amount (the "from" account).

la := list accounts
lt := list transactions in current account (the last 10 - by default - transactions; change the number by changing the Scheme variable bal/number-to-quick-list)
ltn := list transactions in current account, prompt for number to list

bt := total accounts by type (income, expense, asset, liability)

re := list transactions in current account matching a regular expression

sa := set current account
ca := display current account

w := write out a saved bal file
r := read in a saved bal file

p X := print X where X is a Scheme object or expression.  For example, p '(1 2 3) will print the list (1 2 3) and p "hello, world" will print "hello, world".

q := quit, unless -s was specified, prompt to save work before exiting.

? := display all possible commands (roughly, the above text)

---

At the prompt, any Scheme function can be entered (except that the usual outside parenthesis should be omitted; for example - display "hello, world" - is translated into the Scheme command - (display "hello, world") - and prints "hello, world").  But you do not need to know any Scheme to use bal, just to extend it.

In fact, the above commands are Scheme functions.  To see their source code, look at the function called "bal_standard_func()" in bal.c.  The interactive commands above use the function "bal/call" to prompt the user for their options. Non-interactive versions of most of the commands XX are usually called "bal/XX" and take their arguments in the standard way to pass arguments to functions in Scheme.  If you are familiar with Emacs, "bal/call" has a similar purpose as the Emacs Lisp "interactive" function, used to make Scheme functions interactive.

---

The command has two options:

-f file := specify a file to load data from (specify it without the ".btar" extension; to load "zach.btar", type -f zach)

-l file := load user-written Guile Scheme functions from file

-s := do not prompt to save on exit, for use in scripting

If you specify any other text as an argument to bal, it will execute the text as if it were entered at the command prompt and then exit (prompting to save the result unless -s is given).

---

The saved file is a tar archive with a number of CSV files, describing the accounts and the transactions in the accounts. The files are human-readable and easy to open as data in R, libreoffice, gnumeric, or another spreadsheet program.

---

The source code is a single C file (bal.c) which has some Scheme in it as well.  It is about 1700 lines of code as of 2018-10-10.

If you find yourself wanting to write an extension that has a similar feel to the main editing commands, see the function "bal_standard_functions ()" in the C source code and the "bal_call" C function (can call as "bal/call" in Scheme).

The prompt is whatever is returned by the evaluating the Scheme expression "(bal/prompt)" so redefining this function can customize your prompt to show additional information.  By default, the prompt indicates what the current account is, see the definition of bal/prompt in "bal_standard_functions()" in bal.c.

bal/call has the following format:

(bal/call "function name to call" (list (cons "Account" "account") (cons "File" "string") ...))

Where the first option is the function name to call and the second is a list with pairs giving the command prompt to print to ask for input and the second argument specifies the type of argument.

---

bal is Free Software, licensed under the terms of the GPL version 3.  You are free to modify and redistribute the software so long as you allow others to do the same with your modified version.  See COPYING for details.

---

To compile bal, type: make

bal depends on libreadline, libcsv, libguile, and libgc to compile.

bal expects the programs tar, mkdir, rm, and mktemp to be on the path.  It has only been tested with the GNU versions of these utilities.  Let me know if I accidently used something non-portable to BSD or similar, and I will fix it.  

---

It would be possible to write another user interface for bal in Scheme (a more graphical interface) that calls the core functions in the background.  The way you would hook it in would be something like:

bal -l gui.scm startgui

where (startgui) is the Scheme function to start the user interface (defined in gui.scm).

