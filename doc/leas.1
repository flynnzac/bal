.\" This is the manpage for leas.
.\" Copyright (c) 2019, Zach Flynn.
.\" See the file COPYING_DOC for copying conditions.
.TH bal 1 2019-04-26 
.SH NAME
leas \- the little extensible accounting system \- for keeping accounts in order and studying past spending habits
.SH SYNOPSIS
.B leas [-f FILE] [-l CODE] [-s] [-n] [COMMAND]

.SH DESCRIPTION
.B leas
keeps track of personal accounts and spending.  

.LP
Text entry at the
.B leas
console follows standard line editor conventions (it has Emacs-like
key bindings, uses the GNU readline library). To cancel a
command, type: Control-C.


.B leas's
main interactive commands are:

.TP
.BR spend
spend money (transfer from asset to expense account)
.TP
.BR charge
charge a purchase (transfer from liability to expense account)
.TP
.BR earn
earn money (transfer from income to asset account)
.TP
.BR borrow
borrow money (transfer from liability to asset account)
.TP
.BR aa
add account
.TP
.BR at
add transaction to current account
.TP
.BR et\~ [n]
edit transaction, optionally setting how many of the latest transaction numbers to list (any transaction can be chosen whether it is listed or not).
.TP
.BR lt
list most recent transactions in current account (change number to list by modifying the variable leas/number-to-quick-list).
.TP
.BR ltn
list most recent transactions in current account, prompt for number to
list
.TP
.BR ea
rename account
.TP
.BR da
delete account
.TP
.BR dt
delete transaction
.TP
.BR la
list accounts and current balances
.TP
.BR lae
list expense accounts and current balances
.TP
.BR lai
list income accounts and current balances
.TP
.BR laa
list asset accounts and current balances
.TP
.BR lal
list liability accounts and current balances
.TP
.BR bt
total accounts by type (income, expense, asset, liability)
.TP
.BR cex
total across expenditure accounts
.TP
.BR cin
total across income accounts
.TP
.BR cas
total across asset accounts
.TP
.BR cli
total across liability accounts
.TP
.BR cwo
assets - liabilities
.TP
.BR cba
current balance
.TP
.BR re
list transactions in current account matching a regular expression
.TP
.BR sa
set current account
.TP
.BR ca
display current account
.TP
.BR w
write accounts to file
.TP
.BR r
read saved accounts from file
.TP
.BR t
transfer from one account to another
.TP
.BR dtr
delete a transfer
.TP
.BR ltbd
list transactions in current account by day, prompting for the first and last day to show
.TP
.BR v
print version
.TP
.BR sd
set "current" day, changing it allows you to see how account values have changed over time 
.TP
.BR cd
print current day out in YYYY-MM-DD format
.TP
.BR baod
prints account balance over a sequence of days
.TP
.BR exod
prints total expenses as of a sequence of days
.TP
.BR inod
prints total income as of a sequence of days
.TP
.BR liod
prints total liabilities as of a sequence of days
.TP
.BR wood
prints net worth as of a sequence of days
.TP
.BR ttbd
prints total of all transactions between a sequence of days
.TP
.BR ttre
prints total of all transactions between a sequence of days matching a regular expression
.TP
.BR pl
pay a loan, allows you to split a payment between a principal account (liability account) and an interest account (an expense account)
.TP
.BR fn
print out current default save file
.TP
.BR csp
Change the stock price of current account
.TP
.BR "cal [opt]"
print out calendar, can pass a string to cal which acts like specifying options for the program cal at the command line
.TP
.BR p " " X
print X, a Scheme expression
.TP
.BR q
quit, unless -s specified, prompt to save before quit
.LP
The command prompt is a full Guile Scheme interpreter except that you do not need to enclose the outer-most expression in parenthesis. Any valid Scheme code can be executed at the prompt.  For example, typing
.B display \(dqhello\(dq
will print the text "hello".
.B leas
loads the Scheme functions in the /usr/local/share/leas.scm file at startup. These functions implement the commands above.
.LP
Of particular interest for developing your own functions in Scheme is the function
.B leas/call
which can be used to make Scheme functions interactive.
.LP
The saved file is simply a
.B tar
archive of CSV files that record transactions and characteristics of accounts.  These files are human-readable.
.LP
The prompt is whatever is returned by the evaluating the Scheme expression "(leas/prompt)" so redefining this function will customize your prompt.
.SH OPTIONS
.TP
.BR \-f " " FILE
load accounts from FILE
.TP
.BR \-l " " CODE
execute Scheme code in file CODE
.TP
.BR \-s
do not prompt to save on exit, will not save on exit
.TP
.BR \-n
do not load ~/.leasrc.scm
.TP
.BR COMMAND
execute COMMAND as if it was entered at
.B leas's
prompt and then exit.  This enables you to, for example, type "leas t" to enter a new transaction (supposing your main bal file is loaded in your ~/.leasrc.scm).
.SH FILES
.B leas
executes Scheme code in ~/.leasrc.scm when it starts up if the file is present.
.SH EXAMPLES
.TP
leas
start the leas interpreter and execute any Scheme code in ~/.leasrc.scm (potentially including code to load data from a default file).
.TP
leas -f myaccounts.leas
load the file 
.B myaccounts.leas
from the current directory.
.TP
leas -s v
quits and exists after displaying version number (without prompting to save data).
.TP
leas aa
displays prompts to add new account after evaluating ~/.leasrc.scm and then exits (prompting to save)
.TP
leas t
displays prompts to add new transaction after evaluating ~/.leasrc.scm and then exits (prompting to save)
.TP
leas -s la
displays current account balances and quits without prompting to save.
.TP
leas -f myaccounts.leas -l myscript.scm -s
Runs a script, presumably to modify myaccounts.leas, and exists.  leas
can be run noninteractively in this way.
.SH "SEE ALSO"
.SH BUGS
.TP
Please report as an issue to https://github.com/flynnzac/leas
.SH AUTHOR
Zach Flynn <zlflynn@gmail.com>

This manpage is distributed under the GNU Free Documentation License version 1.3.  See COPYING_DOC for the text of the license.  There are no invariant sections.
