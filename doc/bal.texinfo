\input texinfo
@settitle bal manual
@copying
This is the manual for bal, a personal account manager.

Copying @copyright{} 2019 Zach Flynn.
@end copying

@titlepage
@title bal manual
@author Zach Flynn

@page
@vskip 0pt plus 1fill
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top bal

This is the bal reference manual.
@end ifnottex

@ifinfo
@menu
* Introduction:: introduction to bal, what it is, and an outline of manual
* Basic usage:: basic interactive usage of bal
* Programming bal:: full documentation of the functions bal exposes for use when writing custom bal commands
@end menu
@end ifinfo

@node Introduction
@chapter Introduction

@b{bal} is an interactive, command-line program for managing personal finances.  Its goal is to be a simple but easily-extensible tool for helping you keep track of your spending and an aid in making future plans.  @b{bal} was conceived from the need to track my own personal finances leading up to my wedding and finding that most free software personal finance packages were large, complicated GUI programs that were difficult to hack to make work the way I wanted them to. @b{bal} is a command-line program, but it is possible to write a GUI on top of the program.  It is possible because @b{bal} can be extended arbitrarily using the Guile Scheme programming language.  If you make a neat extension like this, let me know and I will reference it in this manual.

No knowledge of Scheme or programming in general is required to use @b{bal}.  I have included almost all the functions I use personally in the @b{bal} distribution itself. In other words, I use @b{bal} without any programming in Scheme on a day-to-day basis.  The only commands I have written that are not included in the main @b{bal} distribution are some commands to fetch the price of various stocks I own and update their value automatically, but I will show how to write such a command later in this document as an example.

The other extreme in the accounting software world were programs that required the user to edit text files to add transactions (the best example being @b{ledger}).  I found this to be difficult to use as a user and wanted something more interactive.  Of course, you may have your own preference.  Like @b{ledger}, @b{bal} stores data in human-readable text files, but @b{bal}'s save files are particularly easy to analyze with other tools.  The @b{bal} save file is simply a @b{tar} archive of comma-separated data files with data about your various transactions.  You can open these files in @b{R}, for example, and analyze your past spending that way.

All commands that ship with @b{bal} are small Guile Scheme commands which call a few functions exported by @b{bal} from C and a built-in function @i{bal/call} which lets the user enter the function arguments interactively (it fills the role of @i{interactive} in Emacs, if you are familiar with it).  These functions are documented in the reference manual to help you construct your own commands.  The @b{bal} prompt, in fact, is a Scheme interpreter.  Any Scheme expression can be written there.

This document has two main sections.  In the first, I describe the basic workflow for using @b{bal}.  This section is more in-depth than the manpage and gives some examples of how to add accounts and make transactions.  It is a tutorial that will help get you up-and-running using @b{bal}.  In the second section, I describe all the Scheme commands exported by @b{bal} which is more useful if you are trying to write your own commands.

@node Basic usage
@chapter Basic usage

This chapter will be a tutorial demonstrating basic usage of @b{bal}.

@node Adding a cash asset account
@section Adding a cash asset account

A @b{bal} file is made up of several `accounts'.  To start using @b{bal}, you will want to add some asset accounts to represent your assets.  Assets can be wherever you store your money.  Asset accounts can be Checking accounts, Savings accounts, Stocks, Bonds, Cash, and anything else you own.  To see how this works in @b{bal}, let us look at an example of adding a checking account to a fresh @b{bal} file.

@example
:> aa
Account: @i{Checking}
0: Expense
1: Income
2: Asset
3: Liability
Type: @i{2}
Opening Balance: @i{10000}
(Checking) :> 
@end example


@node Paying for expenses
@section Paying for expenses

Now that we have an asset account, we can use it to pay for our expenses.

First, we add an expense account, say an account for our Rent.

@example
(Checking) :> aa
Account: @i{Rent}
0: Expense
1: Income
2: Asset
3: Liability
Type: @i{0}
Opening Balance: @i{0}
(Rent) :>
@end example

Now, to pay the Rent.  The main command you use in @b{bal} after getting your accounts set up is the `transfer' command, @t{t}.  @t{t} transfers money from one account to another account.  Making a payment is transferring money from your asset accounts to your expense accounts.

@example
(Rent) :> @i{t}
 0: Checking
 1: Rent
To Account: @i{1}
 0: Checking
 1: Rent
From Account: @i{0}
Amount: @i{2000}
Description: @i{The rent}
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Checking) :>
@end example

By default, the prompt tells you what the @i{current account} is and, when you add an account, the current account is set to the account you just created.  @b{bal} has several commands that act on the current account.  You can change the current account with the @t{sa} command,

@example
(Checking) :> sa
 0: Checking
 1: Rent
Account: 1
(Rent) :> 
@end example

Another command you commonly use in @b{bal} is the `list transactions' command, @t{lt}.  @t{lt} lists the transactions in the current account,

@example
(Rent) :> lt
2019-04-30 The rent        2000.00
@end example

To see how much money is in your accounts, type @t{la} (for `list account').

@example
(Rent) :> la
Checking         8000.00    8000.00
Rent             2000.00    2000.00
@end example

The output has two columns.  The first gives the balance in your account on the @i{current day}, and the second gives the balance in your account in the future.

To see the current day, use the command @t{cd}.  To set the current day, use @t{sd}.

@example
(Rent) :> sd
Current Day: 
Year [2019]: 2018
Month [4]: 12
Day [30]: 31
(Rent) :> cd
2018-12-31
@end example

Now, if we type @t{la}, we can see what the account balance would have looked like on 2018-12-31 and what it would be in the future.

@example
(Rent) :> la
Checking        10000.00    8000.00
Rent                0.00    2000.00
@end example

To change the day back to the current day, type @t{sd} and take all the default options,

@example
(Rent) :> sd
Current Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Rent) :>
@end example

To list only expense accounts (useful for getting an understanding of where you are spending your money),

@example
(Rent) :> lae
Rent         2000.00    2000.00
@end example

@node Earning income
@section Earning income

It is a good idea to earn income to pay for your expenses.  Highly recommended.  Like with paying expenses, earning income starts up adding an income account. Let's start with adding a salary account,

@example
(Rent) :> aa
Account: Salary
0: Expense
1: Income
2: Asset
3: Liability
Type: 1
Opening Balance: 0
(Salary) :>
@end example

To receive a salary, do the opposite of paying for expenses: transfer money from the salary account to an asset account.
@example
(Salary) :> t
 0: Checking
 1: Rent
 2: Salary
To Account: 0
 0: Checking
 1: Rent
 2: Salary
From Account: 2
Amount: 6000
Description: Salary
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Salary) :> lt
2019-04-30 Salary        -6000.00
(Salary) :> la
Checking        14000.00   14000.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
@end example

@node Paying back debt
@section Paying back debt

Adding debt follows the same pattern as paying expenses and receiving income.
@example
(Salary) :> aa
Account: Loan
0: Expense
1: Income
2: Asset
3: Liability
Type: 3
Opening Balance: 0
(Loan) :> t
 0: Checking
 1: Rent
 2: Salary
 3: Loan
To Account: 0
 0: Checking
 1: Rent
 2: Salary
 3: Loan
From Account: 3
Amount: 10000
Description: Personal Loan
Day: 
Year [2019]: 
Month [4]: 
Day [30]: 
(Loan) :> la
Checking        24000.00   24000.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
Loan           -10000.00  -10000.00
(Loan) :> lt
2019-04-30 Personal Loan       -10000.00
@end example

Usually, people do not give you interest-free loans.  So you will also need an @i{expense} account for paying interest.
@example
(Loan) :> aa
Account: Interest
0: Expense
1: Income
2: Asset
3: Liability
Type: 0
Opening Balance: 0
(Interest) :>
@end example

To pay back loans, use the command @t{pl}.  This command allows you to split your monthly payment on the loan between interest and principal.
@example
(Interest) :> pl
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Loan Account: 3
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Interest Account: 4
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Pay from Account: 0
Principal: 70
Interest: 30
Description: Loan Payment
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Checking) :> la
Checking        23900.00   23900.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
Loan            -9930.00   -9930.00
Interest           30.00      30.00
@end example

It is useful to see broadly how much we are spending, how much we are making, and how in debt we are.  To do so, we can use the command @t{bt}.
@example
(Checking) :> bt
Expense           2030.00    2030.00
Income           -6000.00   -6000.00
Asset            23900.00   23900.00
Liability        -9930.00   -9930.00
Worth            13970.00   13970.00
Balances         10000.00
@end example

Note that income is measured as a @i{negative} number as are @i{liabilities}.  @i{Worth} is @i{Assets} - @i{Liabilities}.

@node Non-cash assets
@section Non-cash assets

@node Common customizations
@section Common customizations

@node Customize prompt
@subsection Customize prompt

@node Programming bal
@chapter Programming bal

This chapter will be more of a reference manual for the various Scheme functions available in @b{bal}.

@bye


