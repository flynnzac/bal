\input texinfo
@settitle bal manual
@author Zach Flynn
@copying
This is the manual for bal, a personal account manager.

Copying @copyright{} 2019 Zach Flynn.
@end copying

@titlepage
@title bal manual

@page
@vskip 0pt plus 1fill
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top bal

This is the bal reference manual.
@end ifnottex

@ifinfo
@menu
* Introduction:: introduction to bal, what it is, and an outline of manual
* Basic usage:: basic interactive usage of bal
* Programming bal:: full documentation of the functions bal exposes for use when writing custom bal commands
@end menu
@end ifinfo

@node Introduction
@chapter Introduction

@b{bal} is an interactive, command-line program for managing personal finances.  Its goal is to be a simple but easily-extensible tool for helping you keep track of your spending and an aid in making future plans.  @b{bal} was conceived from the need to track my own personal finances leading up to my wedding and finding that most free software personal finance packages were large, complicated GUI programs that were difficult to hack to make work the way I wanted them to. @b{bal} is a command-line program, but it is possible to write a GUI on top of the program.  It is possible because @b{bal} can be extended arbitrarily using the Guile Scheme programming language.  If you make a neat extension like this, let me know and I will reference it in this manual.

No knowledge of Scheme or programming in general is required to use @b{bal}.  I have included almost all the functions I use personally in the @b{bal} distribution itself. In other words, I use @b{bal} without any programming in Scheme on a day-to-day basis.  The only commands I have written that are not included in the main @b{bal} distribution are some commands to fetch the price of various stocks I own and update their value automatically, but I will show how to write such a command later in this document as an example.

The other extreme in the accounting software world were programs that required the user to edit text files to add transactions (the best example being @b{ledger}).  I found this to be difficult to use as a user and wanted something more interactive.  Of course, you may have your own preference.  Like @b{ledger}, @b{bal} stores data in human-readable text files, but @b{bal}'s save files are particularly easy to analyze with other tools.  The @b{bal} save file is simply a @b{tar} archive of comma-separated data files with data about your various transactions.  You can open these files in @b{R}, for example, and analyze your past spending that way.

All commands that ship with @b{bal} are small Guile Scheme commands which call a few functions exported by @b{bal} from C.  These functions as well as the built-in interactive functions are documented in the reference manual to help you construct your own commands.  The @b{bal} prompt, in fact, is a Scheme interpreter.  Any Scheme expression can be written there.

This document has two main sections.  In the first, I describe the basic workflow for using @b{bal}.  This section is more in-depth than the manpage and gives some examples of how to add accounts and make transactions.  It is a tutorial that will help get you up-and-running using @b{bal}.  In the second section, I describe all the Scheme commands exported by @b{bal} which is more useful if you are trying to write your own commands.

@node Basic usage
@chapter Basic usage

This chapter will be a tutorial demonstrating basic usage of @b{bal}.

@node Programming bal
@chapter Programming bal

This chapter will be more of a reference manual for the various Scheme functions available in @b{bal}.

@bye


