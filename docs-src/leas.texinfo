\input texinfo
@settitle Leas manual
@copying
This is the manual for Leas, the Little Extensible Accounting System, a personal account manager.

Copying @copyright{} 2020 Zach Flynn.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end copying

@titlepage
@title Leas manual
@author Zach Flynn

@page
@vskip 0pt plus 1fill
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Leas

This is the Leas reference manual.
@end ifnottex

@ifinfo
@menu
* Introduction:: introduction to Leas, what it is, and an outline of manual
* Tutorial:: tutorial explaining basic interactive usage of Leas
* All Interactive Commands:: reference for all interactive commands
* Leas file format:: documentation of file format for Leas for other programs and scripts to modify them
* Programming Leas:: full documentation of the functions Leas exposes for use when writing custom Leas commands
* GNU Free Documentation License:: full documentation of the functions Leas exposes for use when writing custom Leas commands
@end menu
@end ifinfo

@node Introduction
@chapter Introduction

Leas is an interactive, command-line program for managing personal finances.  Its goal is to be an extensible tool for helping you keep track of your spending and to aid in making plans.  I started Leas to keep track of my own finances. I found most personal finance packages had a long Time-to-Transact: it took time to boot up a GUI application that was not usually running and was outside my normal workflow.  This small friction made it harder for me to build the habit of keeping track of my finances.  I also found the programs difficult to extend. So I wrote Leas to solve this problem. I have been using it personally since October 2018 so it works for at least one user, but I'm sure it has lots of room for improvement: make suggestions!

Leas is a command-line program, but it is interactive unlike other command-line solutions. When you add a new transaction, Leas prompts you for the information it needs.  You don't have to remember any switches, what your accounts are named, etc. This design decision was made because of my experience trying other command-line solutions.  I found it difficult to use solutions that required editing text files or repeatedly entering commands at the shell. I wanted something more interactive.  Of course, you may have your own preference.

You can also extend and script Leas to automate different transactions or update the price of stocks, mutual funds, and ETF's you own. You can do so because Leas' command prompt is a (Guile) Scheme interpreter.  The program's prompt can execute arbitrary Scheme code (although it is mostly used to execute the pre-written commands included with the system).  The one change Leas makes to Scheme's syntax is that the outer-most expression does not need to be enclosed in parenthesis.  This makes it more convenient to enter Leas' commands which are, under the hood, Scheme functions that take no arguments but instead prompt the user for the data they need.  Leas exposes the system it uses to prompt for arguments so you can write your own functions that obtain their arguments in this way.

No knowledge of Scheme or programming in general is needed to use Leas.  The package includes all the functions I use personally. In other words, I use it without any programming in Scheme on a day-to-day basis.  The only commands I have written that are not included in the main Leas distribution are some commands to fetch the price of various stocks I own.

Leas stores data in human-readable text files. The save files are particularly easy to analyze with statistical or spreadsheet software.  The save file is a tar archive of comma-separated data files with data about your various transactions.  You can open these files in R or Libreoffice and create charts of your past spending.

The standard Leas commands use a built-in function @t{leas/call}.  This function lets the user enter the arguments to a given function interactively (it fills the role of @t{interactive} in Emacs, if you are familiar with it).  These functions are documented in the reference manual to help you construct your own commands.  

This manual has two parts.  In the first, I describe the basic workflow for using Leas without any programming.  This part is more in-depth than the manpage and gives some examples of how to add accounts and make transactions.  It includes a tutorial that will help get you up-and-running and a reference of all interactive commands.  In the second part, I describe all the Scheme functions exported by Leas.  These functions are useful if you write your own Leas extensions.

@node Tutorial
@chapter Tutorial

@node Adding a checking asset account
@section Adding a checking asset account

When you start Leas, you are inside a fresh "book".  A book is a collection of "accounts". To start, you will want to add @i{asset} accounts.  Assets can be wherever you store your money or your property.  Asset accounts can be Checking accounts, Savings accounts, Stocks, Bonds, Cash, and anything else you own.  To see how this works, let's look at an example of adding a checking account to a fresh book.

@example
:> aa
Account: @i{Checking}
0: Expense
1: Income
2: Asset
3: Liability
Type: @i{2}
Opening Balance: @i{10000}
(Checking) :> 
@end example

This opens up an asset account called "Checking" with 10000 units of currency in it as an opening balance.  We can use asset accounts to pay for our expenses, to pay back our loans, and as a place to store the income we earn from working.  I discuss how to do each of those things in the following sections.

@node Paying for expenses
@section Paying for expenses

Now that we have an asset account, we can use it to pay for our expenses.

First, we add an expense account, say an account for our Rent.

@example
(Checking) :> aa
Account: @i{Rent}
0: Expense
1: Income
2: Asset
3: Liability
Type: @i{0}
Opening Balance: @i{0}
(Rent) :>
@end example

Now, to pay the Rent.  @t{t} is the command to transfer money from one account to another.  Making a payment is transferring money from your asset accounts to your expense accounts.

@example
(Rent) :> @i{t}
 0: Checking
 1: Rent
To Account: @i{1}
 0: Checking
 1: Rent
From Account: @i{0}
Amount: @i{2000}
Description: @i{The rent}
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Checking) :>
@end example

You can also use the @t{spend} command which is like the @t{t} command except that it only lists assets in the @i{from} account and expenses in the @i{to} account.  This is useful when you have lots of accounts.  We could have done the following with an equivalent result:
@example
(Rent) :> spend
 2: Rent
To Account: 2
 0: Cash
 1: Checking
From Account: 1
Amount: 2000
Description: The rent
Day:
Year [2020]:
Month [1]:
Day [22]:
(Checking) :>
@end example

@node Current account and day
@section Current account and day

By default, the prompt tells you what the @i{current account} is and, when you add an account, the current account is set to the account you just created.  Several commands act on the current account.  You can change the current account with the @t{sa} ("switch account") command,

@example
(Checking) :> sa
 0: Checking
 1: Rent
Account: 1
(Rent) :> 
@end example

The "list transactions" command is @t{lt}.  It lists the transactions in the current account,

@example
(Rent) :> lt
2019-04-30 The rent        2000.00
@end example

To see how much money is in your accounts, type @t{la} (for "list account") (@t{laa} lists only Asset accounts, @t{lal} lists only Liability accounts, and so on).

@example
(Rent) :> la
Checking         8000.00    8000.00
Rent             2000.00    2000.00
@end example

The output has two columns.  The first gives the balance in your account on the @i{current day}, and the second gives the balance in your account in the future.

To see the current day, use the command @t{cd}.  To set the current day, use @t{sd}.

@example
(Rent) :> sd
Current Day: 
Year [2019]: 2018
Month [4]: 12
Day [30]: 31
(Rent) :> cd
2018-12-31
@end example

Now, if we type @t{la}, we can see what the account balance would have looked like on 2018-12-31 and what it would be in the future.

@example
(Rent) :> la
Checking        10000.00    8000.00
Rent                0.00    2000.00
@end example

To change the day back to the current day, type @t{sd} and take all the default options,

@example
(Rent) :> sd
Current Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Rent) :>
@end example

To list only expense accounts (useful for getting an understanding of where you are spending your money),

@example
(Rent) :> lae
Rent         2000.00    2000.00
@end example

@node Earning income
@section Earning income

It is a good idea to earn income to pay for your expenses.  Highly recommended.  Like with paying expenses, to add income start by adding an income account. Let's start with adding a salary account,

@example
(Rent) :> aa
Account: Salary
0: Expense
1: Income
2: Asset
3: Liability
Type: 1
Opening Balance: 0
(Salary) :>
@end example

When you are paid, transfer money from the salary account to an asset account.
@example
(Salary) :> t
 0: Checking
 1: Rent
 2: Salary
To Account: 0
 0: Checking
 1: Rent
 2: Salary
From Account: 2
Amount: 6000
Description: Salary
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Salary) :> lt
2019-04-30 Salary        -6000.00
(Salary) :> la
Checking        14000.00   14000.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
@end example

@node Managing debt
@section Managing debt

Adding debt follows the same pattern as paying expenses and receiving income.
@example
(Salary) :> aa
Account: Loan
0: Expense
1: Income
2: Asset
3: Liability
Type: 3
Opening Balance: 0
(Loan) :> t
 0: Checking
 1: Rent
 2: Salary
 3: Loan
To Account: 0
 0: Checking
 1: Rent
 2: Salary
 3: Loan
From Account: 3
Amount: 10000
Description: Personal Loan
Day: 
Year [2019]: 
Month [4]: 
Day [30]: 
(Loan) :> la
Checking        24000.00   24000.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
Loan           -10000.00  -10000.00
(Loan) :> lt
2019-04-30 Personal Loan       -10000.00
@end example

Usually, people do not give you interest-free loans.  So you will also need an @i{expense} account for paying interest.
@example
(Loan) :> aa
Account: Interest
0: Expense
1: Income
2: Asset
3: Liability
Type: 0
Opening Balance: 0
(Interest) :>
@end example

To pay back loans, use the command @t{pl}.  This command allows you to split your payment on the loan between interest and principal.
@example
(Interest) :> pl
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Loan Account: 3
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Interest Account: 4
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
Pay from Account: 0
Principal: 70
Interest: 30
Description: Loan Payment
Day: 
Year [2019]: 
Month [4]: 
Day [30]:
(Checking) :> la
Checking        23900.00   23900.00
Rent             2000.00    2000.00
Salary          -6000.00   -6000.00
Loan            -9930.00   -9930.00
Interest           30.00      30.00
@end example

It is useful to see broadly how much we are spending, how much we are making, and how in debt we are.  To do so, we can use the command @t{bt}.
@example
(Checking) :> bt
Expense           2030.00    2030.00
Income           -6000.00   -6000.00
Asset            23900.00   23900.00
Liability        -9930.00   -9930.00
Worth            13970.00   13970.00
Balances         10000.00
@end example

Note that income is measured as a @i{negative} number as are @i{liabilities}.  @i{Worth} is @i{Assets} + @i{Liabilities} (because Liabilities are negative in Leas).  Balances gives the total of the opening balances.

@node Non-cash assets
@section Non-cash assets

You may own some non-cash assets, like stocks, mutual funds, or bonds.  The value of these assets in terms of currency changes over time.  Leas provides a command for updating the currency value of these assets.

First, let's add our mutual fund,
@example
(Checking) :> aa
Account: Mutual Fund
0: Expense
1: Income
2: Asset
3: Liability
Type: 2
Opening Balance: 10000
(Mutual Fund) :>
@end example

Then, let's add an income account for our fund.
@example
(Mutual Fund) :> aa
Account: Mutual Fund Income
0: Expense
1: Income
2: Asset
3: Liability
Type: 1
Opening Balance: 0
(Mutual Fund Income) :>
@end example

Now, say we own 500 shares of the mutual fund each worth 20 currency units. Say the value of a share in the mutual fund increased to 21 currency units. We can then use the @t{csp} ("change share price") command to change the value of the shares in our mutual fund,
@example
(Mutual Fund Income) :> sa
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
 5: Mutual Fund
 6: Mutual Fund Income
Account: 5
(Mutual Fund) :> csp
 0: Checking
 1: Rent
 2: Salary
 3: Loan
 4: Interest
 5: Mutual Fund
 6: Mutual Fund Income
From Account: 6
Stock Price: 21
Number of Shares: 500
Day: 
Year [2019]: 
Month [4]: 
Day [30]: 
(Mutual Fund Income) :> lt
2019-04-30 Stock Price Change         -500.00
(Mutual Fund Income) :> la
Checking                  23900.00   23900.00
Rent                       2000.00    2000.00
Salary                    -6000.00   -6000.00
Loan                      -9930.00   -9930.00
Interest                     30.00      30.00
Mutual Fund               10500.00   10500.00
Mutual Fund Income         -500.00    -500.00
(Mutual Fund Income) :> 
@end example

You can automate this procedure by writing a script in Scheme to fetch the new price of the fund.

@node Saving loading and quitting
@section Saving, loading, and quitting

To save your accounts to disk, use the @t{w} command.

@example
(Mutual Fund Income) :> w
File: example.leas
(Mutual Fund Income) :> 
@end example

To do so non-interactively, type @t{leas/write "example.leas"}.

To quit, use the @t{q} command,

@example
(Mutual Fund Income) :> q
Save file? (yes/no) no
@end example

To load the file you just saved, you can use the interactive command @t{r},

@example
$ leas
:> r
File: example.leas
(Checking) :> la
Checking                  23900.00   23900.00
Rent                       2000.00    2000.00
Salary                    -6000.00   -6000.00
Loan                      -9930.00   -9930.00
Interest                     30.00      30.00
Mutual Fund               10500.00   10500.00
Mutual Fund Income         -500.00    -500.00
(Checking) :> 
@end example

To load the file non-interactively, you can use the command @t{leas/read "example.leas"}.  This command is particularly useful to include in Leas's init file @t{~/.leasrc.scm}.  Usually, this file will include the line,

@example
(leas/read "/path/to/my-account.leas")
@end example

Note that in @t{~/.leasrc.scm} you need to write standard Guile Scheme and enclose things in parenthesis.  The parenthesis are only omitted in the interactive prompt.

@node Scheme code
@section Scheme code

The prompt is a Scheme interpreter and can execute arbitrary code.  The only difference is that the outer expression should not be enclosed in parenthesis.  For example,
@example
(Checking) :> begin (display (+ 1 2)) (display "\n")
3
(Checking) :>
@end example

Leas provides a useful function @t{p} for displaying expressions and then adding a newline like the above,
@example
(Checking) :> p (+ 1 2)
3
(Checking) :>
@end example

In interactive functions, the prompt for the various arguments allows Scheme expressions as well.  For example, you can enter the value of a transaction as @t{(- 15.29 13.99)} or @t{(* 0.08 123)} (for calculating a tax, for example).

@node Common customizations
@section Common customizations

You can add customizations that are loaded automatically in @t{~/.leasrc.scm}.  This section gives examples for a few common customizations.

@node Set default file
@subsection Set default file

You will probably want to load the same file almost everytime you use Leas.  To do so, add the following to @t{~/.leasrc.scm}:

@example
(leas/read "/path/to/file/my-account.leas")
@end example

@node Customize prompt
@subsection Customize prompt

The prompt is generated by calling the Scheme function @t{(leas/prompt)}.  If you change this function, you customize the prompt.  For example, try adding the following to see the current date,

@example
(define leas/prompt
  (lambda ()
    (if (= (leas/get-number-of-accounts) 0)
        ":> "
        (let* ((day (leas/get-current-day))
               (mday (list-ref day 0))
               (month (list-ref day 1))
               (year (list-ref day 2)))
          (string-append
           "("
           (leas/get-current-account)
           " "
           (number->string year)
           "-"
           (number->string month)
           "-"
           (number->string mday)
           ") :> ")))))
@end example

@node All Interactive Commands
@chapter All Interactive Commands

This chapter documents all the interactive commands available in Leas.

@itemize

@item @t{aa}
add account

@item @t{at}
add transaction to current account

@item @t{ltn}
list latest transactions in current account

@item @t{et X}
edit transaction.  X can be omitted, if it is not, display X most recent transactions instead of the default number.

@item @t{lt}
list transactions in current-account.

@item @t{ea}
edit account

@item @t{da}
delete account

@item @t{dt}
delete transaction

@item @t{la}
list accounts and their balances

@item @t{lae}
list expense accounts and their balances

@item @t{lai}
list income accounts and their balances

@item @t{laa}
list asset accounts and their balances

@item @t{lal}
list liability accounts and their balances

@item @t{bt}
current balances totaled by account type

@item @t{cex}
current total of expense accounts

@item @t{cin}
current total of income accounts

@item @t{cas}
current total of asset accounts

@item @t{cli}
current total of liability accounts

@item @t{cwo}
current assets - liabilities

@item @t{cba}
total balances

@item @t{re}
list transactions in current account matching a regular expression

@item @t{sa}
set current account

@item @t{ca}
display current account

@item @t{w}
save to file

@item @t{r}
read from file

@item @t{dtr}
delete transfer originating from a given account

@item @t{ltbd}
print transactions between two dates

@item @t{v}
display version of Leas

@item @t{sd}
set current day

@item @t{cd}
display current day

@item @t{baod}
find the balance of the current account over several days (ex: used for seeing weekly balances for the last month)

@item @t{exod}
see expenses over date range

@item @t{inod}
see income over date range

@item @t{asod}
see assets over date range

@item @t{liod}
see liabilities over date range

@item @t{wood}
see worth over date range

@item @t{ttbd}
see total transactions in an account between dates, over a date range

@item @t{ttre}
see total transactions in current account over a date range that match a regular expression

@item @t{pl}
pay a loan, splitting payments between interest (an expense) and the principal liability

@item @t{fn}
print current file name

@item @t{csp}
change the price of a stock in the current account

@item @t{cal X}
prints the result of the UNIX command @t{(string-append ``cal '' X)}.

@item @t{t}
transfer money between two accounts

@item @t{spend}
Create a transfer from an asset account to an expense account

@item @t{charge}
Create a transfer from a liability account to an expense account

@item @t{earn}
Create a transfer from an income account to an asset account

@item @t{borrow}
Create a transfer from a liability account to an asset account.

@item @t{q}
quit

@item @t{p X}
print X, followed by a newline, for example: @t{p (+ 1 2)} will print @t{3}.

@end itemize

@node Leas file format
@chapter Leas file format

The save file is a tar archive containing the following files in a directory named after the save file's filename (e.g. a save file named @i{book.leas} would, when un-tarred, be a directory called @i{book}):

@itemize @bullet
@item accounts - a CSV file containing the metadata for each account, one line for each account.  There is no header line giving column names. The fields are (in this order):
@itemize @bullet
@item Account Type - one of expense, income, asset, liability.
@item Account Name - the name of the account
@item Opening Balance - the opening balance of the account.
@end itemize
@item @i{account_name}.csv - for each account, there is a separate CSV file (the format of the filename for this CSV file implies that account names in leas need to be valid filenames). There is no header line giving column names.  Each row in the file is a transaction. The fields are (in this order):
@itemize @bullet
@item Account Name - will be the same for all transactions in the file, just the account name.
@item Amount - the amount of money added to or subtracted from the account.
@item Day - the day of the transaction (YYYY-MM-DD)
@item Description - a description of the transaction
@end itemize
@end itemize


@node Programming Leas
@chapter Programming Leas

This chapter is a reference manual for the various Scheme functions available in Leas.

Only non-interactive functions are documented here because the interactive functions are mostly just wrappers of these functions that use @t{leas/call} to get the arguments.

@node Make Scheme functions interactive
@section Make Scheme functions interactive

@itemize
@item @t{(leas/call function-name options)}

Calls the Scheme function with name @t{function-name} (a string) with arguments described by the list @t{options} entered interactively by the user. @t{options} is a list of pairs.  Each element of the list has the following structure: the first element gives the ``name'' of the option (what Leas will prompt for) and the second element gives the ``type'' of the option: the kind of value it should contain.  Both elements should be strings.  The following are the current types allowed for @t{options}.  If you use a type not in this list, whatever the user enters will be passed as-is to the function.

@itemize
@item string
- Pass whatever the user enters to the Scheme function as a string.
@item account
- Pass the name of an account to the Scheme function.  Prompts the user with a menu of accounts to select from.
@item expense_account
- Pass the name of an account to the Scheme function.  Prompts the user with a menu of @i{expense} accounts to select from.
@item income_account
- Pass the name of an account to the Scheme function.  Prompts the user with a menu of @i{income} accounts to select from.
@item asset_account
- Pass the name of an account to the Scheme function.  Prompts the user with a menu of @i{asset} accounts to select from.
@item liability_account
- Pass the name of an account to the Scheme function.  Prompts the user with a menu of @i{liability} accounts to select from.
@item pay_from_account
- Pass the name of an account to the Scheme function.  Prompts the user with a menu of @i{liability} and @i{asset} accounts to select from.
@item current_account
- Pass the name of the current account to the Scheme function.  Does not prompt the user.
@item type
- Prompts the user to select an account type (asset, liability, income, expense).  Passes the type as a string.
@item transaction
- Prompts the user to select a transaction.  Passes a pair of account number and transaction number to label the transaction to the Scheme function.
@item day
- Prompts the user to select a day. Passes a three-element list elements --- (day month year) --- to the function.
@end itemize

@end itemize

@node Functions to add/edit/delete/get transactions
@section Functions to add/edit/delete/get transactions

@itemize
@item @t{(leas/at account-name amount desc day)}

Adds a transaction to the account with name @t{account-name} with the transaction amount being @t{amount}, description @t{desc}, and day given as @t{day} (a list with three elements, in this order: day, month, year).  This is a primitive function that does not add a counterbalancing transaction in any other account.  Just adds or subtracts the amount from a certain account.  It doesn't take the money from anywhere.

@item @t{(leas/get-transactions account-name number)}

Returns the most recent @t{number} transactions from @t{account-name}.  A transaction in Scheme is a five element list with elements in this order: @t{(description amount year month day)}.

@item @t{(leas/get-all-transactions account-name)}

Returns all transactions from the account with name @t{account-name}.

@item @t{(leas/get-transactions-by-regex account-name regex)}

Returns all transactions from the account with name @t{account-name} where the transaction's description matches the regular expression @t{regex}.

@item @t{(leas/get-transaction-by-location account-number transaction-number)}

Return the transaction from the account numbered @t{account-number} with the transaction numbered @t{transaction-number}.

@item @t{(leas/get-transactions-by-day account-name first-day last-day)}

Return the transactions from account @t{account-name} that occurred between @t{first-day} and @t{last-day}.

@item @t{(leas/t to-account from-account amount desc day)}

Create a transfer from one account to another by creating offsetting transactions in both accounts.

@item @t{(leas/dtr from-account to-location)}

Delete a transaction that went from @t{from-account} to @t{to-location} (a pair giving account number and transaction number).

@item @t{(leas/pay-loan loan-account interest-account from-account principal interest desc day)}

Create a loan payment transaction with takes money from @t{from-account} and pays @t{interest} to @t{interest-account} and @t{principal} to @t{loan-account}.  The description and day of the transaction are given by the other two arguments.

@item @t{(leas/change-stock-price stock-account from-account stock-price number day)}

Updates the stock price to @t{stock-price} of a stock account taking the money from @t{from-account} (usually an income account called something like ``Stock Income'').  The stock account is assumed to hold @t{number} shares.  The @t{day} is the day of the transaction.

@item @t{(leas/edit-transact transaction-location day amount desc)}

Edits the transaction at @t{transaction-location} (a pair of account number and transaction number) to have @t{day}, @t{amount}, and @t{desc} set to the given values.

@item @t{(leas/print-tscts tsct-list)}

Prints out a list of transactions in a pretty way (well, at least, in a standard way).  

@end itemize

@node Functions to add/edit/delete/get accounts
@section Functions to add/edit/delete/get accounts

@itemize
@item @t{(leas/aa account-name type opening-balance)}

Adds an account with name @t{account-name} of type @t{type} (one of ``asset'', ``liability'', ``income'', ``expense'') with opening balance @t{opening-balance}.

@item @t{(leas/ea account-name new-account-name new-opening-balance)}

Edits the account that currently has @t{account-name} to have a new name and a new opening balance.

@item @t{(leas/da account-name)}

Delete the account with @t{account-name}.

@item @t{(leas/get-account account-name)}

Return the account with name @t{account-name}.  An account in Scheme is a list with four elements in this order: @t{(name type number-of-transactions opening-balance)}.

@item @t{(leas/get-number-of-accounts)}

Return the total number of accounts.

@item @t{(leas/get-account-by-location account-number)}

Return account at location @t{account-number}.

@item @t{(leas/get-account-location account-name)}

Return the location of the account with name @t{account-name}.

@end itemize

@node Functions to get/modify current day/account/file
@section Functions to get/modify current day/account/file

@itemize
@item @t{(leas/get-current-file)}

Returns the path to the current save file (the last save file loaded or written to).

@item @t{(leas/set-current-day day)}

Set the curent day to @t{day}, a list of three elements in this order: (day month year).

@item @t{(leas/get-current-day)}

Return a three-element list of (day month year) representing the current day.

@item @t{(leas/get-current-account)}

Returns the account name of the current account.

@item @t{(leas/set-account account-name)}

Sets the current account to @t{account-name}.

@end itemize

@node Total accounts
@section Total accounts

@itemize

@item @t{(leas/total-account account-name)}

Return the sum of all transactions in @t{account-name}.

@item @t{(leas/total-all-accounts)}

Return the sum of all transactions across all accounts.

@item @t{(leas/total-all-accounts-of-type type-number)}

Return the sum of all transactions of a certain type (expense = 1, income = 2, asset = 4, liability = 8).

@item @t{(leas/total-by-account-type)}

Return totals for each account type as a list of pairs with the first element of the pair (the @t{car}) containing the name of the account type and the second element containing the total.

@item @t{(leas/display-account-totals accts)}

Display the total of a list of accounts (@t{accts}) in the Scheme format for an account (as returned by say @t{leas/get-account}.

@item @t{(leas/current-total-of-type n)}

Display the total for all accounts of type @t{n}, an integer, where 0 = expense, 1 = income, 2 = asset, 3 = income, 4 = worth, 5 = opening balances.

@end itemize

@node Repeat commands on different days
@section Repeat commands on different days

@itemize

@item @t{(leas/seq-days first-day last-day by)}

Return a list of days starting at @t{first-day} and going to at most @t{last-day} where each element is separated by @t{by} days.

@item @t{(leas/loop-days days current-day number exp)}

A Scheme macro with executes the expression @t{exp} with each element of @t{days} being set to the current day.  For elements of @t{days} after @t{number}, set the current day to @t{current-day} and return an empty list (i.e. stop looping after @t{number} days).  Returns a list of pairs of the day and the results of the expression executed with that as the current day.

@item @t{(leas/balance-account-on-days first-day last-day by account)}

Returns a list of pairs going from @t{first-day} to @t{last-day} by @t{by} days where the first element of each pair is the day and the second element is the account balance on that day.

@item @t{(leas/total-transact-in-account-between-days first-day last-day by account)}

Return the same list of pairs where the second element of the pairs is instead the total amount of transactions between each day.

@item @t{(leas/total-transact-in-account-re first-day last-day by account regex)}

Return the total transactions in acccount on each day in set in the @t{account} that match the regular expression @t{regex}.

@item @t{(leas/output-by-day day amount)}

Display an amount on day.  Used for formatting (day amount) pairs.

@item @t{(leas/get-by-type-over-days first-day last-day by element)}

Returns the same list of pairs where the second element of the pairs is the total transactions of the @t{element} number of the return value of @t{(leas/total-by-account-type)}.

@item @t{(leas/get-by-type-over-days-for-type element)}

Returns a function taking arguments @t{(first-day last-day by)} which calls @t{leas/get-by-type-over-days} fixing the @t{element} argument.

@item @t{(leas/over-day-cmd element)}

A Scheme macro which uses @t{leas/call} to interactively get @t{(first-day last-day by)} arguments for @t{(leas/get-by-type-over-days)} and calls it for @t{element}.

@end itemize

@node Set Leas parameters
@section Set Leas parameters

@itemize

@item @t{(leas/set-select-transaction-number number)}

Set the number of recent transactions to display when selecting a transaction for any operation.

@item @t{leas/number-to-quick-list}

The number of transactions to list when using @t{lt} and similar commands. Modify this variable to get more or less transactions.  By default, it is @t{20}.

@item @t{leas/prompt}

A function that gets called (without arguments) to produce the prompt.  You can modify this to whatever you would like.  By default, it indicates what the current account is.

@end itemize

@node Saving and loading functions
@section Saving and loading functions

@itemize

@item @t{(leas/write file-name)}

Write the whole book to a file called @t{file-name}.

@item @t{(leas/read file-name)}

Read accounts into memory from the file named @t{file-name}.

@end itemize

@node Utility and interpreter functions
@section Utility and interpreter functions

@itemize

@item @t{(q)}

Quit Leas.

@item @t{(p x)}

Print out the object @t{x}.  This is essentially just Guile's @t{display} function which also inserts a newline after the output.



@item @t{(leas/v)}

Return the Leas version as a string.

@item @t{(leas/day-from-time time)}

Return a (day month year) list from a Scheme time object.

@end itemize

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@c The GNU Free Documentation License.
@center Version 1.3, 3 November 2008

@c This file is intended to be included within another document,
@c hence no sectioning command or @node.

@display
Copyright @copyright{} 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
@uref{https://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document @dfn{free} in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The ``Document'', below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as ``you''.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A ``Secondary Section'' is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, La@TeX{} input
format, SGML or XML using a publicly available
DTD, and standard-conforming simple HTML,
PostScript or PDF designed for human modification.  Examples
of transparent image formats include PNG, XCF and
JPG@.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, SGML or
XML for which the DTD and/or processing tools are
not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for
output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The ``publisher'' means any person or entity that distributes copies
of the Document to the public.

A section ``Entitled XYZ'' means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as ``Acknowledgements'',
``Dedications'', ``Endorsements'', or ``History''.)  To ``Preserve the Title''
of such a section when you modify the Document means that it remains a
section ``Entitled XYZ'' according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

@item
VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate A
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section Entitled ``History'', Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
For any section Entitled ``Acknowledgements'' or ``Dedications'', Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section Entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section to be Entitled ``Endorsements'' or
to conflict in title with any Invariant Section.

@item
Preserve any Warranty Disclaimers.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled ``History''
in the various original documents, forming one section Entitled
``History''; likewise combine any sections Entitled ``Acknowledgements'',
and any sections Entitled ``Dedications''.  You must delete all
sections Entitled ``Endorsements.''

@item
COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an ``aggregate'' if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.

@item
TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled ``Acknowledgements'',
``Dedications'', or ``History'', the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.

@item
TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.

@item
FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{https://www.gnu.org/licenses/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

@item
RELICENSING

``Massive Multiauthor Collaboration Site'' (or ``MMC Site'') means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
``Massive Multiauthor Collaboration'' (or ``MMC'') contained in the
site means any set of copyrightable works thus published on the MMC
site.

``CC-BY-SA'' means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.

``Incorporate'' means to publish or republish a Document, in whole or
in part, as part of another Document.

An MMC is ``eligible for relicensing'' if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole
or in part into the MMC, (1) had no cover texts or invariant sections,
and (2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.

@end enumerate

@page
@heading ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (C)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
@end group
@end smallexample

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the ``with@dots{}Texts.''@: line with this:

@smallexample
@group
    with the Invariant Sections being @var{list their titles}, with
    the Front-Cover Texts being @var{list}, and with the Back-Cover Texts
    being @var{list}.
@end group
@end smallexample

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.

@c Local Variables:
@c ispell-local-pdict: "ispell-dict"
@c End:


@bye


